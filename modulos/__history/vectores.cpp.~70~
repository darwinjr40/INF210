//---------------------------------------------------------------------------

#pragma hdrstop

#include "vectores.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

void CargarRandom(TStringGrid *v,byte n,byte a,byte b){
  if (n>0){
   CargarRandom(v,n-1,a,b);
   v->Cells[n-1][0]= a + Random(b-a+1);   //Random(41)-20== Rango [-20,20}
  }
 }


byte PosMayor(TStringGrid *v,byte n){
 byte p;
 if (n==0)
   throw new Exception("Error : vector vacio");
 else if (n==1)
	p = 0;
 else{
	p = PosMayor(v,n-1);
	Cardinal a = (v->Cells[n-1][0].ToInt());
	Cardinal b = (v->Cells[p][0].ToInt());
	if (b < a) p = n-1;
 }
 return p;
}

bool EsVocal(char z){
	AnsiString w = "aeiouAEIOU";
	return w.Pos(z)>0;
}

byte CantVocales(AnsiString x){
  byte c;
  if (x == "") {
	c = 0;
  } else if (x.Length() == 1) {
	c = (EsVocal(x[1]))? (1) : (0);
  } else {
	AnsiString y = x.SubString(x.Length()-1, 2);
	x.Delete(x.Length()-1, 2);
	c = CantVocales(x);
	if (EsVocal(y[1])) {
	  c++;
	}
	if (EsVocal(y[2])) {
	  c++;
	}
  }
  return c;
}


void EliminarElemento( TStringGrid *V, Word &n, byte x){
 if (n > 0) {
	byte E = StrToInt(V->Cells[n-1][0]);
	n = n - 1;
	EliminarElemento(V,n,x);
	if( E != x){
	  V->Cells[n][0] = E ;
	  n = n + 1;
	}

 }
}


void SelectionSort(TStringGrid *v,byte n){
  if (n > 1) {
	byte pm = PosMayor(v, n);
	intercambio(v, n-1, pm);
    SelectionSort(v, n-1);
  }
}
byte elementoMayor(TStringGrid *v,byte n){
 byte p;
 if (n==0)
   throw new Exception("Error : vector vacio");
 else if (n==1)
	p = StrToInt(v->Cells[0][0]);
 else{
	p = elementoMayor(v,n-1);
	byte m = (StrToInt(v->Cells[n-1][0]));
	if (m > p)
	  p = m;
 }
 return p;
}

void intercambio(TStringGrid*v,byte a, byte b ){
  String aux=v->Cells[a][0];
  v->Cells[a][0]=v->Cells[b][0];
  v->Cells[b][0]=aux;
}

void invertir(TStringGrid*v,byte a,byte b){
  byte n=b-a+1;
  if (n>1) {
	invertir(v,a+1,b-1);
	intercambio(v,a,b);
  }
}


bool BusBin(TStringGrid *v, byte x, byte a, byte b){
  bool h;
  byte n = b - a + 1;
  if (n == 0) {
	h = false;
  } else if (n == 1){
	h = (x == (v->Cells[a][0].ToInt()));
  } else {
	byte c =(a+b)/2;
	if (StrToInt(v->Cells[c][0]) == x)
	  h=true;
	else if ((v->Cells[c][0].ToInt()) < x)
	  h = BusBin(v,x,c+1,b);
	else
	  h = BusBin (v,x,a,c-1);
  }

}

//v[9, 7, 6, 5, 3] (n=5,x=8) --> v[9, 8, 7, 6, 5, 3] n=6
//(n=0,x=8) v[]  -> v[8] n=1;
//v[7]  n=1   x=8  -> v[8, 7] n=2
void InsertOrdDesc(TStringGrid *v, byte &n, Cardinal x){
 if (n == 0) {     //caso base
   v->Cells[0][0] = x;
   n = 1;
 }else{
	Cardinal e = v->Cells[n-1][0].ToInt();
	if (e >= x) {   //caso base
	   v->Cells[n][0] = x;
	}else {
	   n--;
	   InsertOrdDesc(v, n, x);
	   v->Cells[n][0] = e;
	}
    n++;
 }
}

void InsertOrdAsc(TStringGrid *v, byte &n, Cardinal x){
 if (n == 0) {     //caso base
   v->Cells[0][0] = x;
   n = 1;
 }else{
	Cardinal e = v->Cells[n-1][0].ToInt();
	if (e <= x) {   //caso base
	   v->Cells[n][0] = x;
	}else {
	   n--;
	   InsertOrdAsc(v, n, x);
	   v->Cells[n][0] = e;
	}
	n++;
 }
}


void CargarOrd(Cardinal num, TStringGrid*v,byte &n){
  if(num < 10){
    v->Cells[0][0] = num;
	n = 1;
  } else {
	CargarOrd(num/10, v, n );
	InsertOrdAsc(v, n, num%10);
  }
}

void EliminarPos(TStringGrid *v, byte &n, byte p){
 if (p < n) {     //caso base
   if (p == (n-1)) {
	n = n - 1;
   } else {
	 byte e = v->Cells[n-1][0].ToInt();
	 n = n - 1;
	 EliminarPos(v, n, p);
	 v->Cells[n][0] = e;
	 n = n + 1;
   }
 }
}

void EliminarPrimerosElementos(TStringGrid *v, byte &n, byte p, byte cant){
 if (cant > 0) {     //caso base
	EliminarPos(v, n, p);
	EliminarPrimerosElementos(v, n, p, cant-1);
 }
}

void EliminarPrimerosElementosV2(TStringGrid *v, Word &n, Word m){
  if (n > 0) {
	 if (m >= n) {
		n = 0;
	} else {
		Word e = v->Cells[n-1][0].ToInt();
		n--;
		EliminarPrimerosElementosV2(v, n, m);
		v->Cells[n][0] = e;
		n++;
	}
  }
}

void GenerarNumeroInvertido(TStringGrid *v, Word n, Cardinal &x){
	if (n == 0) {
		x = 0;
	} else if (n == 1 ) {
		x = StrToInt(v->Cells[0][0]);
	} else{
		Word e = StrToInt(v->Cells[n-1][0]);
		GenerarNumeroInvertido(v, n-1, x);
		Word cantDig = (log10((double)x)+1);
		x = e *(pow10(cantDig))+ x  ;
	}
}
void GenerarNumeroInvertidoV2(TStringGrid *v, byte a, byte b, Cardinal &x){
  byte n = b - a + 1;
  if (n == 0)
	x = 0;
  else if(n == 1)
	x = StrToInt(v->Cells[a][0]);
   else {
	 Cardinal e = StrToInt(v->Cells[a][0]);
	 GenerarNumeroInvertidoV2(v, a+1, b, x);
	 Word cantDig = (log10((double)e)+1);
	 x = x * (pow10(cantDig)) + e;
  }
}



//dunnia--------------------------------------------------------

AnsiString mayorPromedio(TStringGrid *v, Word i, Word n, Double &p){
  AnsiString s;
  if (i >= n) {
	s =  "";
  } else {
	p = p + v->Cells[i][0].ToDouble();
	if ((i+1)==n) {
	  p = p / n;
	}
	s = mayorPromedio(v, i+1, n, p);
	if (v->Cells[i][0].ToDouble() > p) {
	 s = v->Cells[i][0] + "  " +s ;
	}
  }
  return s;
}

//void __fastcall TForm1::Numerosmayoresalpromedio1Click(TObject *Sender)
//{          //promedio
//	int n = StringGrid1->ColCount;
//	Double a = 0;
//	Edit2->Text =   mayorPromedio(StringGrid1, 0, n, a);
//}bool pertenece(TStringGrid * v, int i, int n, int x){  bool b;
  if (i >= n)
	b =  false;
  else {
	if (v->Cells[i][0] == x) {
	  b =  true;
	} else {
	  b = pertenece(v, i+1, n, x);
	}
   }
  return b;
}


//void __fastcall TForm1::elelementoexiste1Click(TObject *Sender)
//{
// int n = StringGrid1->ColCount;
// int x = Edit1->Text.ToInt();
// Edit2->Text = BoolToStr(pertenece(StringGrid1, 0, n, x), true);
//}
void Interseccion(TStringGrid * a, int n,TStringGrid * b, int m, String &x){
  if (n == 0) {
	x = "";
  } else {
	 Interseccion(a,n-1, b, m, x);
	if (pertenece(b, 0, m, a->Cells[n-1][0].ToInt()) &&
	   (x.Pos(a->Cells[n-1][0]) == 0))
	  x = x + "  " + a->Cells[n-1][0] ;
  }
}

//void __fastcall TForm1::interseccionde2vectores1Click(TObject *Sender)
//{
//  int n = StringGrid1->ColCount;
//  int m = StringGrid2->ColCount;
//  String x;
//  Interseccion(StringGrid1, n,StringGrid2, m, x);
//  Edit3->Text =	x;
//}

